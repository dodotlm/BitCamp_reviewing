## 어제 했던 부분에서 놓친 부분이나 + 오늘 배운 부분에서 짚고 넘어가야 할 부분

1. DTO = Data Transfer Object, VO: Value Object, Entity  << 나중에 웹 프로그래밍 하면 만들 클래스들
2. 코딩은 용기...! 일단 쳐보고 보자.
3. nextInt()와 nextLine()을 사용할 때 주의할 점!!!
  nextLine()과 next()의 차이점은 nextLine()은 엔터값이 입력될 때 까지의 문자열을 next()는 스페이스바가 입력될 때까지의 문자열을 리턴시킨다는 점이다.
  그런데 문제가 있다.
  정확히는 엔터값 전의 내용들만, 스페이스 바 전의 내용들만 저장하는 것이다.
  즉 nextLine()이 nextInt()와 같이 쓰이게 된다면 오류가 날 것이다.

  int i = sc.nextInt();
  String str1 = sc.nextLine();

  이러면 nextInt()를 실행하여 입력하고 엔터를 치는 순간 밑의 nextLine()가 엔터값을 받아버려서 그냥 넘어가 버리게 된다. 왜? nextLine()은 엔터값이 들어오면 리턴시키게 된다고 했으니까.
  그래서 같이 쓸 때는

  int i = sc.nextInt();
  sc.nextLine();
  String str1 = sc.nextLine();

  이렇게 엔터값을 받아줄 sc.nextLine();을 하나 써주어야 정상적으로 코드가 작동하는 걸 볼 수 있다.







## static 정적.....

1. "메모리에서 삭제되지 않음"
2. 이런 static이 들어간 메소드들은 객체를 만들어 주지 않고 그냥 그 이름 그대로 사용하게 된다.
3.
용어정리를 하고 넘어가자.

 - 인스턴스 변수와 메소드 : 인스턴스 변수와 메소드는 객체 생성 후에 사용한다.
 - 클래스 변수와 메소드 : static 변수와 메소드로 부르기도 한다. 객체 생성없이 사용가능.

    public int price;
	  public static String grade;
                                                                                CarStatic 클래스    
---------------------------------------------------------------------------------------
    CarStatic car = new CarStatic();
		car.company = "현대";
		car.model = "제네시스";
    car.carInfo();

    CarStatic.grade = "B";
		CarStatic.printCurrentGrade();

  인스턴스는 객체를 생성해줘야 사용할 수 있고 객체를 이용해서 사용하지만
  클래스변수나 메소드는 그냥 클래스명 을 갖다가 박고 사용한다.



## 상속

1. 부모 클래스의 속성들을 자식 클래스가 같이 쓸 수 있게 되는 것이다.

 public class Parent {
    int height;
    String haircolor;
    String skincolor;
    public void eat() {
    }
  }                                   << 부모 클래스

  public class Child extends Parent { << 상속 할 때 public 자식클래스이름 extends 부모클래스이름 으로 정의한다.
    int weight;
    String speakType;
    int freindCnt;
    public void programming() {
    }
  }                                   << 자식 클래스. 부모의 속성들과 자신의 속성들을 동시에 쓸 수 있다.

  public static void main(String[] args) {
    Parent p = new Child();           << 이거는 p가 부모클래스 타입이지만 자식클래스가 들어가게 된다. 즉 오버라이드가 있으면 자식클래스가 작동해서 자식클래스의 메소드가지 사용가능.
  }


## 오버라이딩

부모의 기능을 자식이 재정의 하는 것을 의미한다.

부모에서 
public void speedUp(){
}
이라는 기능이 있었으면

자식은
public void speedUp(){
  syso("스피드업");
}
이런식으로 수정할 수 있는 것이다. 단 무언가를 추가 시킬 수만 있고 삭제하는 것은 안된다.
무슨 말이냐면 원형을 살린 상태에 무언가 기능을 더하는 정도만 되는 것이다.
+ 참고로 매개변수 숫자나 형태도 건드리면 안된다. 물론 중괄호 안의 필드에서는 자유로이 수정 가능.
+ 접근제어자를 public으로 바꾸는 건 된다. protected도 가능. default는 같은 패키지일 때만 가능, private는 불가능.




## 다형성

그래서 오버라이딩 + 다형성 = 부모의 추상화 가 되는 것이다.
부모에는 알맹이는 없고 그냥 추상화 된 메소드만 그득그득히 잡아두고 자식클래스에 내용을 입력해 두는 것이다.
이러면 코드의 재사용성이나 가독성이 높아지지만 성능이 하락하고 복잡해진다.


## super라는 키워드에 대해서 알아보자.

자식클래스에서 부모클래스의 멤버변수나 메소드, 부모의 생성자에 접근하거나 호출하려면 super라는 키워드를 사용한다. 

접근제어자가 protected이상(public, protected)일 때 : super.변수명으로 접근가능 혹은 super.메소드명();

default는 같은 패키지인 경우에 접근 가능.
private는 접근 불가.

자식 클래스의 생성자에서 항상 처음으로 호출되어야 함. 그 다음에 this를 사용하던지 뭘하던지....

public 자식클래스() {
        super(); -->항상 먼저 호출
        나머지 작업
    }

이런 식으로 말이죠...




## 자바의 최상위 클래스는 Object 입니다.

모든 클래스는 Object를 상속받기 때문에 Object 구현되어 있는 메소드(toString(), notify(), notifyAll() ...)를 사용할 수 있다.
다형성의 측면에서 Object를 타입으로 지정하면 모든 클래스들을 넣어서 사용할 수 있기 때문에 엄청난 확장성을 가지게 된다.

그냥 이걸 타입으로 지정해서 객체 사용하면 메소드란 메소드는 다 사용할 수 있게 된다.

기술) 클래스에서 Object클래스에 있는 toString 메서드를 재정의하고 main메서드에서 println을 사용하면 재정의한대로 나오게 된다.
---> 이는 println을 실행하면 자동으로 toString이 실행되어지게 되는데 이 toString을 다시 재정의 해버렸기 때문에 Object클래스에 있던 내용대로 나오는게 아니라 재정의한데로 나오게 되는것이다.



## 추상화

 -  부모클래스의 기능들은 다형성을 통해 거의 동작하지 않으므로 부모클래스에는 기능의 정의만 하고 자식클래스에서 기능을 구현하는 방식.
 -  추상클래스&메소드를 만드는 방식
	abstract class 클래스명 {}
	abstract 리턴타입 메소드명 (매개변수);

	그래서 추상클래스는 그냥 선언만하고 끝.
	추상메소드도 그냥 선언부만 정의해 놓고 구현부는 없다. 그래서 {}가 없기 때문에 뒤에 세미콜론 붙여야 한다.























