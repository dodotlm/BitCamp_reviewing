-- 1. SUB QUERY
-- 1-1. 단일 행 서브쿼리
-- SELECT, FROM, JOIN, WHERE 절에서 사용가능한 서브쿼리

-- 송강교수보다 부임일시가 빠른 교수들의 교수번호, 교수이름 조회

SELECT PNO
	, PNAME
	FROM PROFESSOR
	WHERE HIREDATE < ( 
	
	SELECT P.HIREDATE 
	FROM PROFESSOR P
	WHERE PNAME = '송강'
	
	); -- 단일 행 서브쿼리

-- EX) 손하늘 사원보다 급여(연봉)가 높은 사원의 사원번호, 사원이름, 급여 조회
	
SELECT E.ENO 
	, E.ENAME 
	, E.SAL 
	FROM EMP E
	WHERE E.SAL > (
	SELECT EP.SAL
		FROM EMP EP
		WHERE EP.ENAME = '손하늘'
	);

-- 위 쿼리를 JOIN절로 변경
SELECT E.ENO 
	, E.ENAME 
	, E.SAL 
	FROM EMP e
	JOIN(
		SELECT SAL 
			FROM EMP
			WHERE ENAME = '손하늘'
	) A
	ON E.SAL > A.SAL;


-- 일반화학 교실에서 공융의 일반화학 기말고사 성적보다 높은 학생의 
-- 학생번호, 학생이름, 과목번호, 과목이름, 기말고사 성적 조회



SELECT ST1.SNO 
	, ST1.SNAME
	, C1.CNO 
	, C1.CNAME 
	, SC1."RESULT" 
	FROM STUDENT ST1
	JOIN SCORE SC1
	ON SC1.SNO = ST1.SNO 
	JOIN COURSE c1
	ON SC1.CNO = C1.CNO 
	WHERE C1.CNAME ='일반화학' AND SC1."RESULT" >(
	
	SELECT SC."RESULT" 
	FROM SCORE SC
	JOIN STUDENT ST
	ON SC.SNO = ST.SNO 
	JOIN COURSE c 
	ON SC.CNO = C.CNO 
	WHERE ST.SNAME = '공융'
	AND C.CNAME = '일반화학'
	
	) -- 공융의 일반화학 점수를 갖는 쿼리
	ORDER BY SC1."RESULT";


-- 1-2. 다중행 서브쿼리
-- 서브쿼리의 결과가 여러행인 서브쿼리
-- FROM, JOIN, WHERE 절에서 사용가능

-- 급여가 3000이상인 사원의 사원번호, 사원이름, 급여 조회



SELECT E.ENO 
	, E.ENAME 
	, E.SAL 
	FROM EMP e 
	JOIN(
		SELECT ENO
			FROM EMP
			WHERE SAL >= 3000
	) A
	ON E.ENO = A.ENO;	

-- WHERE 절에서 사용(=======================중요============================)

SELECT E.ENO 
	, E.ENAME 
	, E.SAL 
	FROM EMP e 
	WHERE E.ENO IN ( -- IN을 사용하는 이유는 서브쿼리의 값들이 여러개이기 때문이다.
	
	SELECT ENO
			FROM EMP
			WHERE SAL >= 3000
	
	);


-- 1-3. 다중열 서브쿼리
-- 서브 쿼리의 결과가 다중행이면서 다중열인 서브쿼리
-- FROM, JOIN절에서만 사용이 가능하다.
-- 과목번호, 과목이름, 교수번호, 교수이름 조회하는 서브쿼리를 작성하여
-- 기말고사 성적 테이블과 조인하여 과목번호, 과목이름, 교수이름, 기말고사 성적을 조회

SELECT C.CNO
	, C.CNAME 
	, P.PNO
	, P.PNAME
	, SC."RESULT"
	FROM COURSE C
	JOIN SCORE SC
	ON C.CNO = SC.CNO 
	JOIN PROFESSOR p 
	ON C.PNO = P.PNO ; -- 이렇게 JOIN이 여러번 쓰인 것을
	
-- 이렇게	

SELECT A.CNO
	, A.CNAME 
	, A.PNO
	, A.PNAME
	, SC."RESULT"
	FROM (
	
	SELECT C.CNO
		, C.CNAME 
		, P.PNO
		, P.PNAME
		FROM COURSE c
		JOIN PROFESSOR p 
		ON C.PNO = P.PNO 
	
	)A
	JOIN SCORE SC
		ON A.CNO = SC.CNO ; -- 이렇게 정리를 할 수 있다.
	
-- 서브 쿼리는 그룹함수와 주로 사용한다.
		
		
-- 학생번호, 학생이름, 과목번호, 과목이름, 기말고사 성적, 기말고사 등급, 담당 교수번호, 
-- 담당 교수이름 조회하는데 서브쿼리를 이용
-- STUDENT, SCORE, SCGRADE 테이블의 내용을 하나의 서브쿼리로 묶고
-- COURSE, PROFESSOR 테이블의 내용을 서브쿼리2
		
SELECT A.SNO
	, A.SNAME
	, B.CNO
	, B.CNAME
	, A."RESULT"
	, A.GRADE
	, B.PNO
	, B.PNAME
	FROM (
	SELECT S.SNO
		, S.SNAME
		, SC."RESULT"
		, SC.CNO
		, SG.GRADE
		FROM STUDENT s 
		JOIN SCORE SC
		ON S.SNO = SC.SNO 
		JOIN SCGRADE SG
		ON SC."RESULT" BETWEEN SG.LOSCORE AND SG.HISCORE
		)A
	JOIN (
	SELECT C.CNO 
		, C.CNAME 
		, P.PNO 
		, P.PNAME
		FROM COURSE c 
		JOIN PROFESSOR p 
		ON P.PNO = C.PNO 
	)B
	ON A.CNO = B.CNO;



-- 2. 집합 연산자
-- 집합 연산자는 서로 다른 두 쿼리의 결과를 합집합, 차집합, 교집합 해주는 연산자
-- 2-1. 합집합 연산자(UNION, UNION ALL)
-- 2000년 이후에 부임된 교수의 교수번호, 교수이름, 부임일자와 
-- 2000년 이후에 채용된 사원의 사원번호, 사원이름, 채용일자를 조회
-- 첫번째 컬럼의 개수, 데이터 타입에 나머지 칼럼들의 개수, 데이터 타입들을 맞춰줘야 한다.

SELECT PNO
	, PNAME
	, HIREDATE
	FROM PROFESSOR
	WHERE HIREDATE > TO_DATE('20000101 00:00:00' , 'YYYYMMDD HH24:MI:SS')
UNION -- 전혀 관련없는 테이블끼리 서로 합해주는 구문. 
-- 단 데이터 타입 기준은 제일 처음에 쓰인 테이블의 것과 같아야 함
SELECT ENO
	, ENAME
	, HDATE
	FROM EMP
	WHERE HDATE >= TO_DATE('20000101 00:00:00' , 'YYYYMMDD HH24:MI:SS') 

-- UNION은 중복을 제거해서 합집합 연산을 해준다.
-- 평점이 3.0이상인 학생의 학생번호, 학생이름, 학년, 평점과 
-- 학년이 3학년인 학생의 학생번호, 학생이름, 학년, 평점을 함께 조회
	
SELECT ST1.SNO 
	, ST1.SNAME 
	, ST1.SYEAR 
	, ST1.AVR 
	FROM STUDENT ST1 
	WHERE ST1.AVR >= 3.0
UNION
SELECT ST2.SNO 
	, ST2.SNAME 
	, ST2.SYEAR 
	, ST2.AVR
	FROM STUDENT ST2
	WHERE ST2.SYEAR = 3;

-- 이때 3학년인데다가 3.0이상인 학생(중복되는 데이터)들은 안 나온다.



-- 중복제거 없이 하는 법
SELECT ST1.SNO 
	, ST1.SNAME 
	, ST1.SYEAR 
	, ST1.AVR 
	FROM STUDENT ST1 
	WHERE ST1.AVR >= 3.0
UNION ALL -- 바로 UNION ALL을 집어넣는 것. 이러면 합집합+교집합의 형태가 되어버린다.
SELECT ST2.SNO 
	, ST2.SNAME 
	, ST2.SYEAR 
	, ST2.AVR
	FROM STUDENT ST2
	WHERE ST2.SYEAR = 3;

-- 2-2. 차집합 연산자(MINUS)
-- 첫 번째 쿼리에서 두 번째 쿼리와 공통된 데이터를 제외한 결과를 조회한다.
INSERT INTO EMP VALUES ('9998', '제갈궁', '지원', NULL, SYSDATE, 3200, 320, NULL);
COMMIT;

-- 성이 제갈이면서 지원업무를 하지 않는 사원의 사원번호, 사원이름, 업무 조회
SELECT ENO
	, ENAME
	, JOB
	FROM EMP 
	WHERE ENAME LIKE '제갈%'
	AND JOB != '지원';

SELECT ENO
	, ENAME
	, JOB
	FROM EMP 
	WHERE ENAME LIKE '제갈%'
MINUS
SELECT ENO
	, ENAME
	, JOB
	FROM EMP 
	WHERE JOB = '지원';


-- 차집합 연산자를 사용해서 담당교수가 배정되지 않은 과목의 과목번호, 과목이름 조회

SELECT CNO 
	, CNAME 
	FROM COURSE
	WHERE 1=1
MINUS
SELECT CNO
	, CNAME
	FROM COURSE
WHERE PNO IS NOT NULL;


-- 2-3. 교집합 연산자(INTERSECT)
-- 첫 번째 쿼리의 결과에서 두 번째 쿼리의 공통된 결과만 조회
-- 교집합 연산자를 사용해서 물리, 화학과 학생 중 
-- 평점이 3.0 이상인 학생의 학생번호, 학생이름, 전공, 평점 조회

SELECT SNO 
	, SNAME 
	, MAJOR 
	, AVR 
	FROM STUDENT
	WHERE MAJOR IN ('물리', '화학')
INTERSECT
SELECT SNO 
	, SNAME 
	, MAJOR 
	, AVR 
	FROM STUDENT
	WHERE AVR >= 3.0;


