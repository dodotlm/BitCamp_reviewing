## 오늘 수업에서 한번쯤 다시 보아야 할 내용

1.
StringBuffer sb = new StringBuffer();  // StringBuffer 객체 sb 생성
sb.append("hello");
sb.append(" ");
sb.append("jump to java");
String result = sb.toString();
System.out.println(result);  // "hello jump to java" 출력

StringBuffer를 소환하여 append 메서드를 생성해낸다.
이 append 메서드는 sb라는 객체에 계속해서 문자열을 쌓아 올리고 쌓아 올려진 문자열들은 sb라는 객체에 계속 추가된다.
반복문 없이 문자열을 넣을 수 있는 방법.


2.
	// IOException은 checkedException으로 무조건 예외처리 코드를 작성해야 한다.
	// readLine 메소드의 정의로 이동해보면 throws 구문으로 IOException을 던지고 있기 때문에
	// readLine 메소드를 호출하는 곳에서 IOException에 대한 예외처리를 해야한다.





## 중첩 클래스

 -  클래스 내부에 또 다른 클래스를 만드는 것을 의미한다. 

1. 정적 중첩 클래스 (static)
 - 외부 클래스의 객체를 만들지 않아도 됨
 - 한방에 생성 가능
>> 외부클래스.내부클래스 내부클래객체 = new 외부클래스.내부클래스(); 이런 식으로 객체 생성가능
>> 외부클래스.내부클래스.정적멤버이름; 이런 식으로 정적멤버에 접근 가능
>> 내부클래스의객체.멤버변수나함수; 이런 식으로 

2. 인스턴스 클래스
 - 외부 클래스의 객체를 생성하고 객체를 만들 수 있다.
>>  외부클래스 외부클래스객체 = new 외부클래스();
그 다음에 >> 외부클래스.내부클래스 내부클래스객체 = 외부클래스객체.new 내부클래스();


그래서 둘의 차이는 스태틱은 그대로 사용가능, 인스턴스는 외부 만들고 사용하는 차이이다.

3. 지역 중첩 클래스
 - 클래스 내부에 있는 메서드 안에 클래스를 만들어 버린 것....
 - 얘는 밖에서 객체 당연히 못 만든다.
 - 외부 클래스의 객체가 불러낼 수 있는 메서드만 호출 가능...
 -> 그래서 얘의 용도가 뭐냐고 하면 클래스 내에서의 클래스 역할을 해준다. 정도로 생각해 두면 된다.


4. 익명 중첩 클래스
 - 클래스의 이름이 없고 선언과 동시에 인스턴스를 생성한다. main 메소드 실행 구문에서 인터페이스 객체 생성자 뒤에 이거{} 붙여서 이 안에 오버라이딩해서 메소드 완성시켜 주면 된다.
// 솔직히 얘를 어디에 써먹어야 할 지 감이 안 잡힌다...



## 객체 배열

 - 이거 했잖아!!!!!!!!!!!!
 - 클래스명[] 배열명 = new 클래스명 [생성된 배열의 크기];
 - 클래스라는 속성의 배열이라고 생각하면 된다!
 - 짚고 넘어갈 부분은 인터페이스 배열 같은 경우에는 인터페이스를 객체로 끌고와서 사용하는게 불가능 하니까, 인터페이스 객체를 생성한 것에 자식 클래스의 객체로 다시 만들어 사용하면 된다.

 - 잠깐!!
  // 자바의 최상위 클래스인 Object로 배열을 만들면 자바의 모든 타입을 담을 수 있는 배열을 만들 수 있다.
		
	 	Object[] objArr = new Object[100];

  단 치명적인 단점이 있다. 사용시에는 변환하는 과정이 필요하다.
  CarInterface carInterface = (CarInterface)objArr[0];
  String str = (String)objArr[1];

  >> 이런식으로 사용할 때에는 이게 무엇인지 타입을 일일히 지정해 주어야 한다는 단점이 있다.




## 예외 오류 (try~catch)

 - 오류가 나도 강제종료 하는 것을 막도록 하는 것이 try-catch 구문이다.
 - 오류에는 대략 3가지가 있는데

컴파일에러 : 컴파일 중 발생한 에러

런타임에러 : 프로그램 실행 중 발생한 에러

논리적에러 : 실행은 되는 데 생각대로 동작하지 않는 것

이 에러들이 발생해도 안 멈추게 해주는 역할을 한다.

- 2가지 방식이 있다. Checked Exception, UnChecked Exception

-> Checked Exception : 강제로 예외처리 시키는 구문   << 얘를 이제 try-catch문을 사용하게 하는 것이다.
-> UnChecked Exception : 예외처리가 강제되지 않는 구문

 try{
      // try구문의 소스코드 실행 중에 예외가 발생하면 catch블록으로 넘어간다.
   } catch(ClassNotFoundException ce) {
      ClassNotFoundException 대한 예외처리 코드작성
   } catch(NullPointerException ne) {
      NullPointerException 대한 예외처리 코드작성
   } catch(Exception e) {
      위에 ClassNotFoundException, NullPointerException 두 예외에 포함되지 않는 예외들에 대한 예외처리 코드작성
   } finally {
      예외가 발생하던 발생하지 않던 무조건 실행
   }

 - finally 구문은 선택사항이다. 하지만 try-catch는 한 쌍이라 어느 한쪽을 떼어놓고 할 수는 없다.

- 예외클래스변수명 = new 예외클래스(메세지); throw 변수명; << 이건 무조건 예외를 발생시키게 하는 구문
 -> 근데 강사님 말로는 그다지 좋은 구문이 아니니 try-catch를 사용해라.. 아니 그냥 안 좋은 구문이다. try-catch 사용해라.



## java의 다양한 패키지들

1. Object : 자바의 최상위 클래스로 모든 클래스들의 최상위 클래스이다.
1-1. clone()은 깊은 복제이다.
1-2. 클래스나 타입을 확인할 때 Object의 getClass메소드를 사용한다.
	ex) System.out.println(objExample1.getClass().getName());













