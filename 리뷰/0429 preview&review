## 0429 preview&review

# 수업 중 다시 한 번 생각해야 하는 부분

1. continue는 그 조건문 내에 있는 그 무엇도 실행 혹은 멈추게 하지 않고 그냥 그 즉시 상위 증감식으로 넘어간다.

 for(int i = 0; i < 100; i++) {
        //i가 짝수 일 때는 출력하지 않고 바로 증감식으로 이동
        if(i % 2 == 0) {
            continue;
        }

        System.out.println(i);
    }

이런 식으로.

2. 당연하겠지만 중첩 for문에서 내부에 break 문이 실행되었다고 해서 그 상위의 for문이 break되는 것이 아니다.
3. do - while문은 한 번 실행하고 그 다음부터 반복할 지 말지 고민하는 구문.
4. ctrl + shift + o 를 누르면 필요한 라이브러리들을 자동으로 import 해준다. // 이클립스에서만 되는거다.
5. Scanner에 대해 보면

   // Scanner.nextInt() : 입력받은 정수값을 리턴해주는 메소드. 엔터값은 포함하지 않음.
			// Scanner.next() : 입력받은 문자열을 리턴해주는 메소드. 엔터값은 포함하지 않음.
			// Scanner.nextLine() : 입력받은 문자열을 리턴해주는 메소드. 엔터값을 포함.

우선 scanner 클래스를 먼저 하나 생성자 이용해서 만들어 놓아야 한다.

Scanner sc = new Scanner(System.in); //이렇게 말이죠

끝났을 때는 sc.close();로 닫아주는 것이 국룰. 물론 저기서 sc는 scanner 클래스를 지칭하는 변수이므로 다른 걸루 바꿔도 상관 無

6. System.out.println() 은 출력이 끝나면 바로 다음 줄로 넘어가게 만든다. 
7. System.out.print()   은 출력이 끝나면 그대로 그 줄에 남아있는다.
8. 비교1.equals(비교2)로 문자열을 비교하는데, 만약 대문자 소문자 상관없이 비교하고 싶으면...

   비교1.equalsIgnoreCase(비교2)

   를 이용하면 q와Q는 같은 것이라고 판단하게 된다. 물론 원래 기능은 남아있어 q와r은 다른 것이라 판단되어진다.

9. Random 클래스. Random.nextLnt(바운드): 0 ~ 바운드-1 까지의 랜덤한 값 생성

		Random random = new Random();
		
		int randomVal1 = random.nextInt(3);
		System.out.println(randomVal1);
		
		int randomVal2 = random.nextInt(3)+1;
		System.out.println(randomVal2);
 10. Math 클래스의 Random() 메소드 사용. 0<= Math.random() < 1의 실수 값을 랜덤으로 리턴


		randomVal1 = (int)(Math.random() * 10)+1; //1<= < 10의 범위 중에서 랜덤으로 값을 끄집어 내는 것이다.
		System.out.println(randomVal1);







#배열의 등장! 모두 무릎을 꿇으심시오!


1. 배열의 선언

int[] intArr = new int[15];

이렇게 객체를 생성하여 선언을 할 수 있으며 이 경우에는 초기화를 직접 해주거나 반복문으로 초기화 해주거나 해야한다.

int[] numArr = {1, 2, 3};

배열을 생성할 때 초기화 하는 방법도 있다.
// 애초에 new 생성자를 만들어서 하는건 기본으로 생성된 객체가 아니라 따로 새로운 객체를 만들고자 사용하는거다.
// 그러므로 위의 경우처럼 선언과 초기화를 동시에 하는 경우에도 객체는 자동적으로 생성이 된다.
// 이해 완료!

2. 배열의 길이는 한 가지 방법을 두 가지 방법으로 써야 한다.

int배열은 변수.length
String배열은 변수.length()
를 이용해 주어야 한다.

참고로 list는 변수.size()를 이용하여 길이를 구한다.  


3. 배열은 아스키코드를 이용하지 않고도 대문자 소문자를 바꿀 수 있다.
   Character.toLowerCase()
   Character.toUpperCase()




 













