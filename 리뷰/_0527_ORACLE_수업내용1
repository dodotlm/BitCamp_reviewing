-- 1. 다중행함수 (GROUP 함수)
-- 다중행 함수는 여러개의 데이터가 들어와서 여러개의 데이터가 리턴되는 함수
-- 그룹함수가 다중행 함수에 포함된다.
-- 그룹함수는 데이터들의 통계를 내는 함수들이 대부분이며 GROUP BY라는 키워드와 함께 사용된다.
-- GROUP BY는 데이터들의 통계를 내는데 어떤 칼럼을 기준으로 그룹화하여 통계를 낼건지 지정하는 구문이다.
-- 그룹함수를 사용할 때 주의할 점은 SELECT 절에 포함된 모든 컬럼들은 GROUP BY 절에 명시되어야 한다.

-- EX) 학년별 학생들의 평점 평균을 구하는 그룹함수
SELECT SYEAR
	, AVG(AVR)
	FROM STUDENT
	GROUP BY SYEAR
	ORDER BY SYEAR;
-- SELECT절에 포함된 컬럼들이 모두 GROUP BY에 명시돼야 하는 규칙 때문에 데이터가 변질된다.
SELECT SYEAR
	, MAJOR
	, AVG(AVR)
	FROM STUDENT
	GROUP BY SYEAR, MAJOR
	ORDER BY SYEAR;

-- 원하는 통계함수 데이터를 조회하는 쿼리를 서브쿼리로 만들어서 다른 데이터들과 조인하여 사용한다.
SELECT ST.SNO 
	, ST.SNAME 
	, ST.MAJOR 
	, ST.SYEAR 
	, ST.AVR 
	, A.AVR
	FROM STUDENT ST
	JOIN (
		SELECT SYEAR
			, AVG(AVR) AS AVR
		FROM STUDENT
		GROUP BY SYEAR
		ORDER BY SYEAR
	)A
	ON ST.SYEAR = A.SYEAR;



-- 1-1. MAX : 데이터들의 최고 값을 조회하는 그룹함수
-- 과목별 기말고사의 최고점 조회
SELECT S.CNO 
	, MAX(S."RESULT") 
	FROM SCORE s 
	GROUP BY S.CNO ; -- ~~별

-- 과목별 기말고사 최고점 조회하는데 과목번호, 과목이름, 점수 조회
SELECT SC.CNO
	, C.CNAME
	, MAX(SC.RESULT)
	FROM SCORE SC
	JOIN COURSE c 
		ON SC.CNO = C.CNO 
	GROUP BY SC.CNO, C.CNAME ;
	
-- 과목별 기말고사 최고점 조회하는데 과목번호, 과목이름, 학생번호, 학생이름, 점수 조회	

SELECT A.CNO
	, A.CNAME
	, ST.SNO
	, ST.SNAME
	, ST.SYEAR
	, A.MAX_RESULT
	FROM  (
		SELECT SC.CNO
			, C.CNAME
			, MAX(SC."RESULT") AS MAX_RESULT
		FROM SCORE SC
		JOIN COURSE c 
			ON SC.CNO = C.CNO 
		GROUP BY SC.CNO, C.CNAME)A
	JOIN SCORE SSC
		ON A.CNO = SSC.CNO 
		AND A.MAX_RESULT = SSC."RESULT"
	JOIN STUDENT ST
		ON SSC.SNO = ST.SNO ;
	
	
-- 데이터 전체에 대한 통계를 낼때는 GROUP BY를 사용하지 않는다.

SELECT MAX(AVG)
	FROM STUDENT;


-- 1-2. MIN : 그룹화된 데이터 중 최소값을 조회하는 함수
-- 학년별 최저 평점 조회(학년, 평점)

SELECT ST.SYEAR
	, MIN(ST.AVR) 
	FROM STUDENT ST
	GROUP BY ST.SYEAR
	ORDER BY ST.SYEAR;

-- 부서별 최저 급여 조회(부서번호, 부서이름)

SELECT E.DNO 
	, MIN(E.SAL) 
	, D.DNAME 
	FROM EMP e
	JOIN DEPT d 
	ON D.DNO =E.DNO 
	GROUP BY E.DNO , D.DNAME;
	
	
	
-- 부서번호, 부서이름, 부서별 최저 급여, 최저 급여에 해당하는 사원번호, 사원이름	
	
SELECT E.ENO 
	, E.ENAME
	, A.MIN_SAL
	, A.DNAME
	FROM EMP e 
	JOIN (
		SELECT E.DNO 
	, MIN(E.SAL) AS MIN_SAL
	, D.DNAME 
	FROM EMP e
	JOIN DEPT d 
	ON D.DNO =E.DNO 
	GROUP BY E.DNO , D.DNAME
	)A
ON A.DNO = E.DNO
AND A.MIN_SAL = E.SAL;
	
	
-- 통계함수의 값이 변질되지 않게 하려면 통계함수를 조회하는 쿼리를 서브쿼리로 작성한다.

SELECT A.DNO
	, A.DNAME
	, A.MIN_SAL
	, E.ENAME 
	FROM (SELECT E.DNO 
	, MIN(E.SAL) AS MIN_SAL
	, D.DNAME 
	FROM EMP e
	JOIN DEPT d 
	ON D.DNO =E.DNO 
	GROUP BY E.DNO , D.DNAME)A
	JOIN EMP e 
	ON A.DNO = E.DNO AND A.MIN_SAL = E.SAL ;
	
	
	
-- 1-3. SUM : 그룹화된 데이터의 총합을 구하는 함수
-- 사원들의 업무별 보너스의 총합

SELECT E.JOB 
	, SUM(E.COMM) 
	FROM EMP E 
	GROUP BY E.JOB ;
	
	
-- 1-4. COUNT : 그룹화된 데이터에 대한 개수를 조회하는 함수
-- COUNT(*) : 모든 컬럼데이터에 대한 행의 개수를 리턴
-- 특정 컬럼에 NULL이 포함되어 있어도 개수에 포함된다.
-- COUNT(특정 칼럼명) : 특정 칼럼에 대한 모든 행의 개수를 리턴.
-- 지정된 칼럼에 NULL이 있으면 카운팅 하지 않음


SELECT DNO,
	COUNT(*)
	FROM EMP
	GROUP BY DNO;

SELECT DNO,
	COUNT(DNO)
	FROM EMP
	GROUP BY DNO;
	
-- 1-5. AVG: 그룹화된 데이터에 대한 평균값을 구하는 함수
-- 전공별 학년별 평균 평점 조회

SELECT ST.MAJOR 
	, ST.SYEAR 
	, AVG(ST.AVR) 
	FROM STUDENT ST
	GROUP BY ST.MAJOR , ST.SYEAR
	ORDER BY ST.MAJOR , ST.SYEAR;
	
-- 전공별 학년별 학생수 조회	
	
SELECT ST.MAJOR 
	, ST.SYEAR 
	, COUNT(ST.SNO)  
	FROM STUDENT ST
	GROUP BY ST.MAJOR , ST.SYEAR
	ORDER BY ST.MAJOR , ST.SYEAR;	
	
	
-- 1-6. HAVING : GROUP BY에 명시된 컬럼에 대한 조건을 만들 수 있는 구문
-- 부서번호가 10,20,30에 대한 평균 급여 조회

SELECT DNO
	, AVG(SAL) 
	FROM EMP
	GROUP BY DNO 
	HAVING DNO IN ('10', '20', '30');
	
	
-- AND/OR 여러개 조건을 작성할 수 있고
-- HAVING 절에는 통계함수에 대한 조건도 작성할 수 있다.	
-- WHERE절에서는 할 수 없는....
	
SELECT DNO
	, AVG(SAL) 
	FROM EMP
	GROUP BY DNO 
	HAVING DNO IN ('10', '20', '30')
		AND AVG(SAL) >= 3000; 

	
-- HAVING 절에는 GROUP BY에 명시되어 있지 않았거나 통계함수가 아닌 ㅈ보건은 작성할 수 없다.
-- 하지만 WHERE절에서는 통계함수에 대한 조건을 작성할 수 없다.
	
-- 통계함수에 대한 조건으로 WHERE절에서 사용하려면 통계함수를 포함한 쿼리를 서브쿼리로 묶는다.
	
SELECT A.*
	FROM (
		SELECT DNO
	, AVG(SAL) AS AVG_SAL
	FROM EMP
	GROUP BY DNO 
	)A
	WHERE A.AVG_SAL <= (SELECT MAX(SAL) FROM EMP);

-- 임용년도가 2000년 이전이고 임용년도가 동일한 교수의 수 조회

SELECT TRUNC(P.HIREDATE, 'YYYY') AS P_YDATE 
	, COUNT(P.PNAME)
	FROM PROFESSOR P
	GROUP BY TRUNC(P.HIREDATE, 'YYYY') -- 별칭은 여기서 안먹히기에 이걸 통으로 다 써줘야 함
	HAVING TRUNC(P.HIREDATE, 'YYYY') < TO_DATE('20000101' , 'YYYYMMDD') ;
	
SELECT TO_CHAR(P.HIREDATE, 'YYYY')
	, COUNT(P.PNAME)
	FROM PROFESSOR P
	GROUP BY TO_CHAR(P.HIREDATE, 'YYYY')
	HAVING TO_CHAR(P.HIREDATE, 'YYYY') < '2000' ;
		

