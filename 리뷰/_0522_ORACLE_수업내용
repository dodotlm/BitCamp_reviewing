-- 1. INNER JOIN
-- JOIN은 여러 테이블에 분산되어 있는 데이터를 한 번에 소화하기 위해 사용하는 기능
-- JOIN은 INNER JOIN과 OUTER JOIN이 존재한다.
-- JOIN 절에는 항상 공통 칼럼에 대한 조건을 ON 절로 만들어줘야 한다.
-- INNER JOIN은 두 테이블에 공통된 데이터를 조회하는 기능
-- 두 테이블에 존재하는 공통된 컬럼을 JOIN 조건으로 명시한다.
-- 학생의 학생번호, 학생이름, 기말고사 성적 조회

SELECT ST.SNO
	, ST.SNAME 
	, SC.CNO
	, SC.RESULT
	FROM STUDENT ST
	INNER JOIN SCORE SC
		ON ST.SNO = SC.SNO -- 이거 일 경우에만
	ORDER BY ST.SNO;

-- 과목번호, 과목이름, 담당교수 번호, 담당교수 이름 조회(COURSE, PROFESSOR 테이블 조인)

SELECT C.CNO 
	, C.CNAME 
	, P.PNO 
	, P.PNAME 
	FROM COURSE c 
	INNER JOIN PROFESSOR p 
		ON C.PNO = P.PNO 
	ORDER BY C.CNO ;


-- 참고로 INNER JOIN에서 INNER는 생략이 가능하다.



-- 1-1. 등가 조인
-- 등가조인은 공통된 컬럼의 데이터가 같은 데이터만을 조회하는 조인
-- 사원의 사원번호, 사원이름, 업무, 급여, 보너스, 부서번호, 부서이름, 부서지역 조회

-- ANSI 표준

SELECT E.ENO 
	, E.ENAME 
	, E.JOB 
	, E.SAL 
	, E.COMM 
	, D.DNO
	, D.DNAME
	, D.LOC 
	FROM EMP E
	JOIN DEPT D
		ON D.DNO = E.DNO
	ORDER BY E.ENO;	


-- ORACLE에서만 사용하는 방식이 JOIN
SELECT E.ENO 
	, E.ENAME 
	, E.JOB 
	, E.SAL 
	, E.COMM 
	, D.DNO
	, D.DNAME
	, D.LOC 
	FROM EMP E
		,DEPT D
	WHERE D.DNO = E.DNO

-- 다만 요즘은 ANSI 표준이 대세기 때문에 이렇게 코드를 짜지는 말자.


-- 세 개 이상 테이블 조인... 그냥 밑에 JOIN-ON을 더 붙여주면 된다.
-- 학생의 학생번호, 학생이름, 과목번호, 과목이름, 기말고사 성적 조회
	
SELECT ST.SNO
	, ST.SNAME
	, SC.SNO
	, C.CNAME
	, SC.RESULT
	FROM STUDENT ST
	JOIN SCORE SC
	ON ST.SNO = SC.SNO
	JOIN COURSE C
	ON SC.CNO = C.CNO;
	
	
-- 당연하지만 4개도 가능하다
-- 학생의 학생번호, 학생이름, 과목번호, 과목이름, 기말고사 성적, 담당 교수 번호, 당당교수 이름 조회
	
SELECT ST.SNO
	, ST.SNAME
	, SC.SNO
	, C.CNAME
	, SC.RESULT
	, P.PNO
	, P.PNAME 
	FROM STUDENT ST
	JOIN SCORE SC
	ON ST.SNO = SC.SNO
	JOIN COURSE C
	ON SC.CNO = C.CNO
	JOIN PROFESSOR p 
	ON P.PNO = C.PNO;
	
	
-- 1-2. 비등가 조인
-- 비등가 조인은 해당 칼럼의 데이터 값이 큰지 작은지, 사이값인지 부등호나 BETWEEN AND 절을 이용해서 비교하는
-- JOIN 구문이다.
-- 학생의 학생번호, 학생이름, 과목번호, 과목이름, 기말고사 성적, 기말고사 성적의 등급 조회

SELECT ST.SNO
	, ST.SNAME
	, SC.CNO
	, C.CNAME
	, SC.RESULT
	FROM STUDENT ST
	JOIN SCORE SC
	ON ST.SNO = SC.SNO 
	JOIN COURSE c 
	ON SC.CNO = C.CNO
	JOIN SCGRADE GR
	--비등가 조인 사용
	ON SC."RESULT" >= GR.LOSCORE AND SC."RESULT" <= GR.HISCORE ; 
	ORDER BY ST.SNO, SC.CNO;
	
-- BETWEEN을 사용하면 일케 됨
	
SELECT ST.SNO
	, ST.SNAME
	, SC.CNO
	, C.CNAME
	, SC.RESULT
	FROM STUDENT ST
	JOIN SCORE SC
	ON ST.SNO = SC.SNO 
	JOIN COURSE c 
	ON SC.CNO = C.CNO
	JOIN SCGRADE GR
	--비등가 조인 사용
	ON SC."RESULT" BETWEEN GR.LOSCORE AND GR.HISCORE ; 
	ORDER BY ST.SNO, SC.CNO;	


-- 사원의 사원번호, 사원이름, 급여, 급여 등급 조회(EMP, SLAGRADE)

SELECT E.ENO 
	, E.ENAME 
	, E.SAL 
	, GR.GRADE 
	FROM EMP E
	JOIN SALGRADE GR
	ON E.SAL BETWEEN GR.LOSAL AND GR.HISAL
	ORDER BY GR.GRADE, E.SAL DESC ;
	

-- 1-3. 셀프조인
-- 조인되는 두 테이블이 동일할 때 셀프조인이라고 부른다.
-- 사원의 사원번호, 사원이름, 사수번호(MGR), 사수이름

SELECT E.ENO
	, E.ENAME
	, EM.MGR 
	, EM.ENAME 
	FROM EMP e 
	JOIN EMP EM -- 독립된 서로 다른 두 개의 EMP 테이블이다.
	ON E.MGR = EM.ENO ;



-- 1-4. CROSS JOIN
-- 여러 테이블을 조인할 때 조인 조건을 정하지 않아 발생하는 일
-- CROSS JOIN은 조인되는 테이블끼리 1대1로 매핑되는 경우에 일어나는 현상이다.
-- 테이블을 조인할 때는 항상 조인 조건을 명시하여 CROSS JOIN이 일어나지 않도록 한다.

--SELECT S.SNO 
--	, S.SNAME 
--	, S2.SNO 
--	, C.ST_NUM 
--	FROM STUDENT s 
--		, SCORE s2 
--		, COURSE c ;

-- 데이터가 기하급수적인 곳에서 이런 일을 하게 되면 그날로 DB 따운될 수도?



-- 2. OUTER JOIN
-- OUTER JOIN은 INNER JOIN 결과에 추가로 기준이 되는 테이블에 남아있는 데이터를 조회하는 기능
-- 기준이 되는 테이블은 OUTER JOIN 앞에 LEFT, RIGHT, FULL로 지정한다.
-- LEFT로 기준 테이블을 지정하면 FROM 절에 사용한 테이블이 기준이 되고
-- RIGHT로 기준 테이블을 지정하면 조인되는 테이블이 기준이 된다.
-- FULL로 기준 테이블을 지정하면 FROM절 테이블과 조인되는 테이블 모두에 기준이 적용되어서
-- INNER JOIN 결과에 FROM절 테이블에만 존재하는 데이터와 조인되는 테이블에만 존재하는 데이터도 모두 추가로
-- 조회한다.

-- 2-1. LEFT OUTER JOIN
-- FROM 절의 테이블에만 존재하는 데이터를 추가로 조회하는 JOIN
-- 학생의 학생번호, 학생이름, 기말고사 성적을 조회하는 데 기말고사 성적이 존재하지 않는 학생의 정보도 조회

INSERT INTO STUDENT VALUES ('999999' , '고기천' , '남' , 1 , '컴공' , 3.0);
COMMIT;

-- ANSI 표준 방식

SELECT ST.SNO
	, ST.SNAME 
	, SC.RESULT
	FROM STUDENT ST
	LEFT OUTER JOIN SCORE SC
		ON ST.SNO  = SC.SNO ;
	
-- ORACLE에서만 사용하는 LEFT OUTER JOIN 방식 (+) 기호를 이용한다.
-- (+) 기호는 LEFT OUTER JOIN과 RIGHT OUTER JOIN만 사용가능
	
SELECT ST.SNO
	, ST.SNAME 
	, SC.RESULT
	FROM STUDENT ST
	, SCORE SC
	WHERE ST.SNO = SC.SNO(+) ; -- RIGHT는 반대로 WHERE ST.SNO(+) = SC.SNO


-- 과목번호, 과목이름, 교수번호, 교수이름을 조회하는데 담당교수가 배정되지 않은 과목정보도 조회
-- NVL 담당교수가 배정되지 않은 과목의 교수번호와 교수이름은 담당교수 배정되지 않음으로 표시
	
SELECT C.CNO 
	, C.CNAME 
	, NVL(P.PNO , '담당교수가') 
	, NVL(P.PNAME, '배정되지 않음')
	FROM COURSE c 
	LEFT JOIN PROFESSOR P
		ON P.PNO = C.PNO 
	
		
-- 사원의 사원번호, 사원 이름, 사수번호, 사수이름 조회하는 데 사수가 배정되지 않은
-- 사원의 정보도 조회

SELECT E.ENO
	, E.ENAME
	, E.MGR -- 여기에 왜 E.MGR이냐면 LEFT JOIN이기 때문에 EM.MGR이면 데이터가 없어서 그런거다. 
	, EM.ENAME 
	FROM EMP E
	LEFT JOIN EMP EM
	ON E.MGR = EM.ENO;


-- 2-2. RIGHT OUTER JOIN
-- INNER JOIN 조회 결과와 추가로 조인되는 테이블에만 존재하는 데이터를 조회하는 JOIN
-- 과목번호, 과목이름, 교수번호, 교수이름 조회하는데 아직 담당과목을 배정받지 못한 교수 정보도 조회

SELECT C.CNO 
	, C.CNAME 
	, P.PNO 
	, P.PNAME 
	FROM COURSE c 
	RIGHT JOIN PROFESSOR p 
		ON C.PNO = P.PNO ;


SELECT C.CNO 
	, C.CNAME 
	, P.PNO 
	, P.PNAME 
	FROM PROFESSOR p  
	LEFT JOIN COURSE c
		ON C.PNO = P.PNO ;

-- 3. FULL OUTER JOIN
-- FULL OUTER JOIN은 INNER JOIN된 조회결과에 
-- FROM 절 테이블에만 존재하는 데이터, 조인되는 테이블에만 존재하는 데이터 
-- 를 모두 조회하는 구문이다.
-- 과목번호, 과목이름, 교수번호, 교수이름 조회하는데 교수가 배정되지 않은 과목과 담당과목이 배정되지 않은
	-- 교수의 정보도 모두 조회

SELECT C.CNO
	, C.CNAME
	, P.PNO 
	, P.PNAME 
	FROM COURSE c 
	FULL JOIN PROFESSOR p 
	ON C.PNO  = P.PNO ;

INSERT INTO EMP VALUES ('9999', '고기천', '개발', NULL, SYSDATE, 3000, 300, NULL);
INSERT INTO DEPT VALUES ('70', '분석', '서울', NULL);
COMMIT;

SELECT *
	FROM EMP;
-- 사원의 사원번호, 사원이름, 부서번호, 부서이름을 조회하는데 부서를 배정받지 못한 사원의 정보와
-- 사원이 한명도 존재하지 않는 부서의 정보도 함께 조회


SELECT E.ENO 
	, E.ENAME 
	, D.DNO 
	, D.DNAME 
	FROM EMP E
	FULL JOIN DEPT D
	ON E.DNO = D.DNO ;



-- 4. 다중 테이블 조인
-- 사원의 사원번호, 사원이름, 급여, 급여등급, 부서번호, 부서이름 조회하는데 
-- 부서를 배정받지 않은 사원의 정보도 조회

SELECT E.ENO 
	, E.ENAME 
	, E.SAL 
	, GR.GRADE
	, E.DNO 
	, D.DNAME
	FROM EMP E
	JOIN SALGRADE GR
	ON E.SAL BETWEEN GR.LOSAL AND GR.HISAL 
	JOIN DEPT D
		ON E.DNO = D.DNO;

-- ON절에도 조건을 여러개 추가할 때는 WHERE 절과 마찬가지로
-- AND, OR를 사용해서 여러개 조건을 명시할 수 있다.
-- 급여가 3000이상이고 부서번호가 01,10,20,60인
-- 사원의 사원번호, 사원이름, 급여, 급여등급, 부서번호, 부서이름 조회하는데 
-- 부서를 배정받지 않은 사원의 정보도 조회

	
SELECT E.ENO 
	, E.ENAME 
	, E.SAL 
	, GR.GRADE
	, E.DNO 
	, D.DNAME
	FROM EMP E
	JOIN SALGRADE GR
	ON (E.SAL BETWEEN GR.LOSAL AND GR.HISAL)
	AND E.SAL >= 3000
	JOIN DEPT D
	ON (E.DNO = D.DNO)
	AND E.DNO IN ('01', '10', '20', '60');

-- 근데 WHERE을 쓰면	
-- OUTER JOIN이라서 조인조건이 달라져서 다른 데이터가 나오게 된다.
	
SELECT E.ENO 
	, E.ENAME 
	, E.SAL 
	, GR.GRADE
	, E.DNO 
	, D.DNAME
	FROM EMP E
	JOIN SALGRADE GR
	ON (E.SAL BETWEEN GR.LOSAL AND GR.HISAL)
	JOIN DEPT D
		ON (E.DNO = D.DNO)
	WHERE E.SAL >= 3000
		AND E.DNO IN ('01', '10', '20', '60');

	
-- 학생의 학생번호, 학생이름, 과목번호, 과목이름, 기말고사 성적, 기말고사 성적 등급, 담당교수 번호, 담당교수 이름 조회

SELECT S.SNO 
	, S.SNAME
	, C.CNO 
	, C.CNAME 
	, SC."RESULT" 
	, S2.GRADE 
	, P.PNO 
	, P.PNAME 
	FROM STUDENT S
	JOIN PROFESSOR P 
	ON S.MAJOR = P."SECTION" 
	JOIN COURSE C
	ON C.PNO = P.PNO 
	JOIN SCORE SC
	ON SC.SNO = S.SNO 
	JOIN SCGRADE s2 
	ON SC."RESULT"  BETWEEN S2.LOSCORE AND S2.HISCORE;





