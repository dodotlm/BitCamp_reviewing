-- 1. 추가적인 조인
-- 1-1. NATURAL JOIN : 조인조건은 명시하지 않아도 자동으로 조인될 칼럼을 추적해서 조인을 해주는 조인
-- 조인되는 칼럼은 테이블의 별칭을 사용할 수 없다.
-- 학생의 학생번호, 학생이름, 기말고사 성적 조회

SELECT ST.SNO
	, ST.SNAME
	, SC."RESULT" 
	FROM STUDENT sT
	JOIN SCORE SC
	ON ST.SNO = SC.SNO 
	ORDER BY ST.SNO, SC.CNO ;
	
-- NATURAL JOIN 사용

SELECT SNO
	, SNAME
	, "RESULT" 
	FROM STUDENT 
	NATURAL JOIN SCORE
	ORDER BY SNO, CNO ;

-- NATURAL JOIN 이용해서 학생번호, 학생이름, 해당학생의 기말고사 평균점수 조회

SELECT SNO
	, SNAME
	, AVG("RESULT") 
	FROM STUDENT 
	NATURAL JOIN SCORE
	GROUP BY SNO, SNAME
	ORDER BY SNO;


-- NATURAL JOIN 이용해서 최대급여가 4000만원 이상인 부서번호, 부서이름, 최대급여 조회

SELECT DNO
	, DNAME	
	, MAX(SAL) 
	FROM DEPT
	NATURAL JOIN EMP
	GROUP BY DNO, DNAME
	HAVING MAX(SAL) >= 4000 
	ORDER BY DNO ;


-- NATURAL JOIN은 테이블 구조를 잘 모르는 개발자가 쿼리를 봤을 때 난해하게 보일 수 있고
-- 조인될 칼럼이 없으면 CROSS JOIN 일어나기 때문에 자주 쓰이지는 않는다.


-- 1-2. JOIN ~ USING
-- USING절에 조인될 컬럼을 소괄호로 묶어서 명시. 조인될 컬럼은 테이블 별칭을 사용할 수 없다.
-- 학생의 학생번호, 학생이름, 해당 학생의 기말고사 성적의 평균

SELECT SNO
	, SNAME
	, AVG("RESULT") 
	FROM STUDENT
	JOIN SCORE
	USING (SNO)
	GROUP BY SNO, SNAME
	ORDER BY SNO;

-- 학점이 3학점인 과목의 과목번호, 과목이름, 학점, 교수번호, 교수이름 조회(JOIN ~ USING 절 사용)

SELECT CNO
	, CNAME
	, ST_NUM
	, PNO 
	, PNAME
	FROM COURSE
	JOIN PROFESSOR
	USING (PNO)
	WHERE ST_NUM = 3
	ORDER BY CNO;
	

-- 2. 다중컬럼 IN절
-- 여러개의 컬럼과 여러개의 데이터를 비교하고 싶을 때 사용하는 구문
-- (컬럼1, 컬럼2) IN ((데이터1-1, 데이터2-1), (데이터1-2, 데이터2-2), ...(데이터1-N, 데이터2-N))
-- => (컬럼1 = 데이터1-1 AND 컬럼2 = 데이터2-1) OR (컬럼1 = 데이터1-2 AND 컬럼2 = 데이터2-2) OR ....
-- OR (컬럼1 = 데이터1-N AND 컬럼2 = 데이터2-N)
-- 부서번호가 10이면서 업무가 분석이나 개발인 사원의 사원번호, 사원이름, 업무, 부서번호 조회

SELECT ENO
	, ENAME 
	, JOB 
	, DNO 
	FROM EMP
	WHERE DNO = '10'
	AND JOB IN ('개발', '분석');

SELECT ENO
	, ENAME 
	, JOB 
	, DNO 
	FROM EMP
	WHERE (DNO, JOB) IN (('10', '분석'), ('10', '개발'));


-- 다중 컬럼 IN절을 사용해서 화학과 1학년 학생이거나 물리학과 3학년인 학생의
-- 학생번호, 학생이름, 전공, 학년 조회

SELECT S.SNO 
	, S.SNAME 
	, S.MAJOR 
	, S.SYEAR 
	FROM STUDENT s  
	WHERE (MAJOR, SYEAR) IN (('화학' , '1'), ('물리' , '3'));
	
-- 다중 컬럼 IN 절을 이용해서 부서번호는 01이나 02면서 사수번호가 0001인 사원의
-- 사원번호, 사원이름, 사수번호, 부서번호 조회

SELECT E.ENO
	, E.ENAME
	, E.MGR
	, E.DNO
	FROM EMP e 
	JOIN EMP e2 
	ON E.MGR = E2.ENO
	WHERE (E.DNO, E.MGR) IN (('01' , '0001') , ('02' , '0001'));

-- 다중 컬럼 IN 절을 이용해서 기말고사 성적의 평균이 48점 이상인 과목의 
-- 과목번호, 과목이름, 기말고사 평균점수, 교수번호, 교수이름 조회

SELECT C.CNO 
	, C.CNAME 
	, AVG("RESULT") AS R_V
	, P.PNO 
	, P.PNAME 
	FROM COURSE c
	JOIN SCORE sC
	ON SC.CNO = C.CNO 
	JOIN PROFESSOR p 
	ON C.PNO = P.PNO 
	GROUP BY C.CNO , C.CNAME, P.PNO , P.PNAME
	HAVING (C.CNO, P.PNO) IN (
		SELECT S.CNO
			,CO.PNO 
		FROM SCORE S
		JOIN COURSE CO
			ON S.CNO = CO.CNO 
		GROUP BY S.CNO ,CO.PNO
		HAVING AVG(S."RESULT") >= 48 
	
	)
	ORDER BY R_V;
	

-- 3. WITH
-- SELECT 구문이 시작되기 전에 가상테이블을 먼저 구성하는 방식
-- SELECT문이 시작되고 가상테이블을 생성하는 서브쿼리보다 속도가 빠르기 때무에 많이 사용된다.
-- 서브쿼리를 너무 많이 사용하면 쿼리의 속도가 현저하게 느려지기 때문에 WITH 절을 적절히 잘 사용해야 한다.
-- SELECT 구문 위에 WITH절로 가상테이블을 구성한다.

WITH DNO10 AS (
	SELECT ENO
		, ENAME
		, DNO
		FROM EMP
		WHERE DNO = '10'
	)
	
SELECT DNO10.*
	, D.DNAME
	FROM DNO10
	JOIN DEPT D
	ON DNO10.DNO = D.DNO;

-- 기말고사 성적이 평균이 50점 이상인 과목번호, 과목이름, 기말고사 성적의 평균점수를 가지는 
-- 가상테이블 OVER50을 WITH절로 구현하고 해당 과목을 수강하는 학생들의 학생 정보조회
-- 과목번호, 과목이름, 과목별 기말고사 성적이 평균점수, 학생번호, 학생이름 조회

WITH OVER50 AS (
	SELECT C.CNO
		, C.CNAME
		, AVG(SC."RESULT") AS R_A
		FROM COURSE C
		JOIN SCORE SC
		ON C.CNO = SC.CNO 
		GROUP BY C.CNO , C.CNAME 
		HAVING AVG(SC."RESULT") >= 50
)

SELECT OVER50.CNO 
	, OVER50.CNAME
	, OVER50.R_A
	, ST.SNO 
	, ST.SNAME 
	FROM OVER50
	JOIN SCORE S2
	ON S2.CNO = OVER50.CNO
	JOIN STUDENT ST
	ON ST.SNO = S2.SNO ;
	

-- WITH 절로 두 개 이상의 가상테이블을 만들 때는 ,로 연결해서 만든다.

WITH
	DNO10 AS (
		SELECT ENO
			, ENAME
			, DNO
			FROM EMP
			WHERE DNO = '10'
	),
	JOBDEV AS (
		SELECT ENO
			, ENAME
			, JOB
			FROM EMP
			WHERE JOB = '개발'
	),
	OVER3000 AS (
		SELECT ENO
			, ENAME
			, SAL
			FROM EMP
			WHERE SAL >= 3000
	)

SELECT DNO10.ENO
	, DNO10.ENAME
	, DNO10.DNO
	, JOBDEV.JOB
	, OVER3000.SAL
	FROM DNO10
	JOIN JOBDEV
	ON DNO10.ENO = JOBDEV.ENO
	JOIN OVER3000
	ON OVER3000.ENO = DNO10.ENO;
	

-- 화학과 1학년 학생의 학생번호, 학생이름, 학년을 가지고 있는 가상테이블 CHMSTU와
-- 과목명에 화학이 포함된 과목의 과목번호, 과목이름, 기말고사 성적, 학생번호를 가지는 가상테이블 CHMRES를 WITH절로 구현하고
-- 화학과 1학년 학생의 학생번호, 학생이름, 학생의 기말고사 성적의 평균점수(소수점 둘째 자리까지 표시)를 조회

WITH
	CHMSTU AS (
		SELECT SNO
			, SNAME
			, SYEAR
			FROM STUDENT
			WHERE (MAJOR = '화학') AND (SYEAR = '1')
	),
	CHMRES AS (
		SELECT C.CNO
			, C.CNAME
			, SC."RESULT"
			, ST.SNO
			FROM COURSE C
			JOIN SCORE SC
			ON SC.CNO = C.CNO
			JOIN STUDENT ST
			ON ST.SNO = SC.SNO
			WHERE C.CNAME LIKE '%화학'
	)
	
SELECT CHMSTU.SNO
	, CHMSTU.SNAME
	, AVG(CHMRES."RESULT") 
	FROM CHMSTU
	JOIN CHMRES
	ON CHMSTU.SNO = CHMRES.SNO
	GROUP BY CHMSTU.SNO, CHMSTU.SNAME;




