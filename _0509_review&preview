## 오늘 수업 중 다시 보아야 하는 부분

1. 객체타입.valueOf(바꿔야할 변수);
	하면 바꿔야할 기본 자료형 변수를 객체 타입 변수로 탈 바꿈 할 수 있게 해준다.
	이거 존나 쓰일 것 같은데 알아둬야 한다!!!

2. 재귀 메소드
	재귀 함수 안 까먹었지? 팩토리얼 공부할 때 이거 사용하는 거 잊지않았지?

	public static long factorial(long num) {
		if(num == 0) {
			return 1;
		}
		else {
			// 재귀 메소드!
			return num * factorial(num-1);
		}
	}

3. 윤년의 조건	
   년도가 400으로 나누어 떨어지거나 
   4로는 나누어 떨어지고 100으로는 나누어 떨어지지 않는 년도


4. Optional 클래스
	NullPointerException을 피하기 위해 만들어진 클래스
	참조타입의 변수들은 예기치 못하게 null이 되는 경우가 있는데
	Optional 클래스에 참조타입 변수들을 담아서 사용하면
	Null로 발생하는 예외를 피할 수 있다.

>> Optional 객체 생성
	String str = null;
		
	Optional<String> optionalStr = Optional.ofNullable(str);

- isPresent 메소드
	현재 Optional 객체에 담겨있는 참조타입의 값이 존재하는지 검사하는 메소드
	값이 존재하면 true, null이면 false
- isEmpty 메소드
	현재 Optional 객체에 담겨있는 참조타입의 값이 비었는지 검사하는 메소드
	값이 null이면 true, null 아니면 false
- get메소드
	Optional 객체에 담겨있는 참조타입의 값을 리턴하는 메소드
	만약 참조타입의 값이 null이면 예외가 발생한다.






## BigInteger

 - 19자리 이상의 대용량 숫자를 이용할 때는 BigInteger 클래스를 이용한다.
1. BigInteger객체를 생성해주고
// 1-1. 생성자를 통한 객체 생성
		BigInteger bigInt1 = new BigInteger("초깃값");
// 1-2. valueOf 메소드를 통한 객체 생성
		BigInteger bigInt2 = BigInteger.valueOf(초깃값);

2. 그 안의 다양한 연산 메소드들을 이용하면 된다.

toString() : 문자열로 변환
toByteArray() : 바이트배열로 변환
intValue() : int형으로 변환
longValue() : long형으로 변환
floatValue() : float형으로 변환
doubleValue() : double형으로 변환
BigInteger add(BigInteger val) : 덧셈연산
BigInteger subtract(BigInteger val) : 뺄셈연산
BigInteger multiply(BigInteger val) : 곱셈연산
BigInteger divide(BigInteger val) : 나눗셈연산(몫)
BigInteger remainder(BigInteger val) : 나머지연산


## BigDecimal

 - 실수형을 굉장히 정밀하게 표현할 수 있게 한다.

intValue() : int형으로 변환
longValue() : long형으로 변환
floatValue() : float형으로 변환
doubleValue() : double형으로 변환
BigDecimal add(BigDecimal val) : 덧셈연산
BigDecimal subtract(BigDecimal val) : 뺄셈연산
BigDecimal multiply(BigDecimal val) : 곱셈연산
BigDecimal divide(BigDecimal val) : 나눗셈연산(몫)
BigDecimal remainder(BigDecimal val) : 나머지연산


## divide(), setScale()

 - 반올림모드를 가지고 있는 클래스



## Calendar

 - 객체 설정
Calendar cal = Calendar.getInstance(); => 시스템의 현재 날짜와 시간을 가지고 있는 객체

- Calendar를 Date타입으로 변환
Calendar cal = Calendar.getInstance();  // 일단 cal 객체 만들어주고
Date d = new Date(cal.getTimeInMillis()); // 이렇게 Date 타입으로 변환


- 그래서 cal.get(Calendar.여러가지메소드들) 로 끌고 올 수 있다.
Calendar.여러가지메소드들 형태를 취하는 이유는 이 메소드들은 전부 static이기 때문에
원본 자료형을 가져와야 쓸 수 있다.

 - SimpleDateFormat

SimpleDateFormat 객체를 생성할 때 생성자의 매개변수로 지정할 날짜 포멧을 전달한다.
Date today = new Date();
SimpleDateFormat simpleDateFormat1 = new SimpleDateFormat("yy년 MM일 dd일");
SimpleDateFormat simpleDateFormat2 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
이런 식으로

System.out.println(simpleDateFormat1.format(today));
System.out.println(simpleDateFormat2.format(today));

>>
24년 05일 09일
2024-05-09 15:27:13
이렇게 형식에 맞춰서 나오게 된다.
단 String형태가 되기 때문에 날짜 연산을 하지는 못한다.









