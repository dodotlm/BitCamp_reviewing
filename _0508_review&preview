## 오늘 강의에서 다시 한 번 보아야 할 부분

1. String은 space값도 문자열로 인식한다.(index로 잡힌다.)

2. 체이닝 기법
	메소드를 체인처럼 엮어서 사용하는 것을 체이닝 기법이라고 본다.
	사용한 메소드의 리턴 타입에 따라서 엮어서 사용할 수 있는 메소드들이 달라진다.

System.out.println(str4.replace('a', '1')
			                   .concat("abcabc")
			                   .replace('b', '2')
			                   .toUpperCase()
				);






## String 

1. charAt(index) : 해당 인덱스의 문자열을 char로 변환
2. 변수.compareTo(str) : 변수의 문자열과 str 문자열이 같으면 0을 리턴. 변수.equalsIgnoreCase(str) 메소드는 compare과 달리 대소문자 구분없이 비교해준다.
3. == 은 주소값을 비교하고 변수.equals(str)은 객체를 비교해 준다.
4. 변수.concat(str) : 변수의 문자열과 str 문자열을 이어주는 메소드
5. boolean endWith(String str) : str로 끝나는지 아닌지 검사. true, false 리턴.
6. boolena equals(String str) : str과 문자열 같은지 다른지 비교.
7. int indexOf(char ch) : ch가 문자열에 몇번째 index에 존재하는 지 검사. 왼쪽부터 검사를 시작해서 처음만나는 ch의 index를 리턴. 못 찾으면 -1 리턴.
8. int indexOf(char ch, int pos) : pos부터 검사를 시작. 왼쪽부터 검사.
9. int indexOf(String str) : str이 존재하는 지 검사. str을 처음 만나는 인덱스를 리턴.
10. int lastIndexOf(char ch) : 오른쪽 검사를 시작해서 ch를 처음 발견한 위치를 리턴.(int lastIndexOf(String str))
11. int length() : 문자열의 길이를 리턴.
12. String replace(char old, char new) : 문자열에서 old를 찾아서 new바꿔서 새로운 문자열 리턴.
13. String replace(String old, String new) : 문자열에서 old를 찾아서 new바꿔서 새로운 문자열 리턴.
14. String replaceAll(String old, String new) : old에 해당하는 문자열을 찾아서 new로 모두 변경. 정규식표현식 사용가능.
>> // str4에 있는 a, c를 2로 치환해라
		System.out.println(str4.replaceAll("[ac]", "2"));
이런 식으로....
15. String[] split(String regex) : 지정된 regex를 기준으로 분리하여 배열로 리턴. -> bit.naver.cloud split(".") => {bit, naver, cloud};
16. boolean startsWith(String str) : str로 시작하는 지 검사.
17. String substring(int begin) : begin 인덱스부터 끝까지 문자열 잘라서 리턴.
18. String substring(int begin, int end) : begin 인덱스부터 end 인덱스 전까지 문자열 잘라서 리턴.
19. String toLowerCase(), toUpperCase() : 영문자 소문자로 변환해서 리턴, 영문자 대문자로 변환해서 리턴.
20. String toString() : String 변수에 저장되어 있는 문자열 리턴.
21. String trim() : 문자열의 왼쪽 끝과 오른쪽 끝의 공백(길이와 상관없이 모두)을 제거한 새로운 문자열 리턴. 중간 공백들은 제거되지 않음
22. static String valueOf(다른타입 변수) : 변수에 저장되어 있는 값을 문자열로 변환하여 리턴.










