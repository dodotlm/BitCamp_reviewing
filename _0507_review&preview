## 오늘 수업에서 한번쯤 다시 보아야 할 내용

1.
StringBuffer sb = new StringBuffer();  // StringBuffer 객체 sb 생성
sb.append("hello");
sb.append(" ");
sb.append("jump to java");
String result = sb.toString();
System.out.println(result);  // "hello jump to java" 출력

StringBuffer를 소환하여 append 메서드를 생성해낸다.
이 append 메서드는 sb라는 객체에 계속해서 문자열을 쌓아 올리고 쌓아 올려진 문자열들은 sb라는 객체에 계속 추가된다.
반복문 없이 문자열을 넣을 수 있는 방법.







## 중첩 클래스

 -  클래스 내부에 또 다른 클래스를 만드는 것을 의미한다. 

1. 정적 중첩 클래스 (static)
 - 외부 클래스의 객체를 만들지 않아도 됨
 - 한방에 생성 가능
>> 외부클래스.내부클래스 내부클래객체 = new 외부클래스.내부클래스(); 이런 식으로 객체 생성가능
>> 외부클래스.내부클래스.정적멤버이름; 이런 식으로 정적멤버에 접근 가능
>> 내부클래스의객체.멤버변수나함수; 이런 식으로 

2. 인스턴스 클래스
 - 외부 클래스의 객체를 생성하고 객체를 만들 수 있다.
>>  외부클래스 외부클래스객체 = new 외부클래스();
그 다음에 >> 외부클래스.내부클래스 내부클래스객체 = 외부클래스객체.new 내부클래스();


그래서 둘의 차이는 스태틱은 그대로 사용가능, 인스턴스는 외부 만들고 사용하는 차이이다.

3. 지역 중첩 클래스
 - 클래스 내부에 있는 메서드 안에 클래스를 만들어 버린 것....
 - 얘는 밖에서 객체 당연히 못 만든다.
 - 외부 클래스의 객체가 불러낼 수 있는 메서드만 호출 가능...
 -> 그래서 얘의 용도가 뭐냐고 하면 클래스 내에서의 클래스 역할을 해준다. 정도로 생각해 두면 된다.


4. 익명 중첩 클래스
 - 클래스의 이름이 없고 선언과 동시에 인스턴스를 생성한다. main 메소드 실행 구문에서 인터페이스 객체 생성자 뒤에 이거{} 붙여서 이 안에 오버라이딩해서 메소드 완성시켜 주면 된다.
// 솔직히 얘를 어디에 써먹어야 할 지 감이 안 잡힌다...


















