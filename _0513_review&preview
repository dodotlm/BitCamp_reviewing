## 다시 한 번 짚고 넘어가야 할 것

List의 선언 : List<Integer> intList = new ArrayList<>();
Set의 선언1 : Set<String> keySet = new HashSet<>();  <-- 요소의 순서가 저장되지는 않음
Set의 선언2 : Set<String> keySet = new TreeSet<>();  <-- 요소의 순서가 저장
Set의 선언3 : Set<String> keySet = new LinkedHashSet<>();  <-- 요소의 순서가 저장
Iterator 선언 : Iterator<String> iterator = keySet.iterator(); <-- 이제부터 iterator객체는 keyset을 조작한다.
Map 선언1 : Map<String, Integer> myMap = new HashMap<>();
Map 선언2 : Map<String, Integer> myMap = new TreeMap<>();
Map 선언2 : Map<String, Integer> myMap = new LinkedHashMap<>();




## 제네릭

 - 자바 제네릭은 타입의 안정성과 재사용성을 높여주는 기능.
T : Type
K : Key
V : Value
E : Element
N : Number

... 추가 작성 요망

제네릭은 클래스와 메소드 두 개에 붙일 수 있다.
-> 클래스인 경우 클래스명 뒤에 붙이고
-> 메소드인 경우 리턴 타입 '앞'에 붙인다. 특히 T를 이용한다. 이 경우 T는 다 들어 올 수 있다.
public <T> T test(T[] tArr or T t or List<T> tList .....)

 - 또한 와일드카드라고 있는데 이건 뭔 타입이든지 다 들어올 수 있다.
 -> T 같은 경우에는 무슨 타입이든 다 들어올 수 있지만 일단 하나 정해지면 그걸로 쭉 가야 하지만
 -> ? 와일드카드 같은 경우에는 무슨 타입이든 다 들어 올 수 있고 뭐로 하나 정해져도 다른 것도 들어올 수 있다.




## enum
 - 관련된 상수들을 모아서 클래스처럼 만들어 주는 것.
 백문이 불여일견 일단 예시를 한 번 보도록 하자.

public enum MultiValueMonth {
	
	// 1. 값이 여러개인 상수 선언
	// 첫 번째 선언된 상수의 값의 타입, 개수와 일치시켜서 만들어야한다.
	
	JAN(1, "JANUARY"),
	FEB(2, "FEBUARY"),
	MAR(3, "MARCH");
	
	// 2. 위에서 지정한 상수의 값의 개수만큼 변수 선언
	private int monthVal;
	private String monthFullName;
	
	// 3. 생성자에서도 지정된 값의 개수만큼 변수를 초기화한다.
	MultiValueMonth(int monthValue, String monthFullName){
		this.monthVal = monthValue;
		this.monthFullName = monthFullName;
	}
	
	// 4. 지정된 값의 개수만큼의 getter 메소드 선언
	public int getMonthValue() {
		return this.monthVal;
	}
	public String getMonthFullName() {
		return this.monthFullName;
	}
}


그래서 enum을 호출해서 사용할 때는

enum원형이름 객체이름 = enum원형이름.enum값하나;   <<이렇게 선언해주고
객체를 이용한다.



