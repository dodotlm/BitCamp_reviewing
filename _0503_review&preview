## 수업 중 다시 봐야 할 내용들


public static int[] remove4 (int[] s1, int[] s2) {
// s1 = {1,2,3,4,5}
// s2 = {1,2,3,1,2,3,2,1,2,3}
Set<Integer> set = new HashSet<>();

for(int num : s2){ // s2에 있는 정수들을 배열 끝까지 다 돌리기
  set.add(num); // Set의 객체인 set에 배열의 값들을 다 담는다. 단 중복되지 않도록!!!
}
// set = {1,2,3}
return Arrays.stream(s1) // stream<integer> = {1,2,3,4,5}
 // filter : 조건이 true인 값만 모아서 stream<Integer>로 만든다.
        .filter(num -> !set.contains(num)))
        .toArray();
}




## 인터페이스

 - 그냥 추상클래스보다 더 깊게 추상화 되는 추상클래스라고 생각해야 한다. 그냥 모든게 추상이야~!
 - 그래도 추상 클래스는 멤버 변수, 일반 메소드, 추상 메소드를 다 가질 수 있었는데 얘는 멤버 변수, 추상 메소드만 가질 수 있다.
--> 즉 일반 메소드는 못 가진다는 말이며 멤버 변수도 final 키워드가 들어간 상수인 변수만 가질 수 있다.
--> 가시화 시켜보면 변수는 무조건 "public static final" 메소드는 무조건 "public abstract"로 시작을 해야한다.
(참고로 메소드에 static은 들어갈 수 있게 됐다.)

 - 인터페이스를 작성하는 방법에 대해서 알아보자
     v 클래스가 올 자리에 interface를 넣어준다.
  interface 인터페이스명 {~~~~~}
  

 - 인터페이스가 추상 클래스와 다른 특징 2가지가 있다.

 1. 인터페이스는 상속 받을 때 extends가 아닌 implements 키워드를 대신 사용한다.
 2. 인터페이스는 다중 상속이 가능하다.
 3. 클래스도 인터페이스는 다중으로 상속받을 수 있고 인터페이스 끼리도 다중상속 가능하다.
  ex) public 클래스명 implements 인터페이스1, 인터페이스2 {
 




