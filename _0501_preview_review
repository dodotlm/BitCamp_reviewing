## 클래스, 그리고 객체지향 프로그래밍

1. 일단 클래스와 객체는 과자 틀과 과자의 관계라고 많이들 비유해 왔다.
2. 클래스 단원에서 쓰이는 용어, 혹은 지칭되는 용어들에 대해 우선 먼저 정리를 해보겠다.

  - 클래스 : 객체와 객체변수를 만드는 기능을 가지고 있다. 개발자가 직접 만드는 '타입'이라고 생각하면 된다.
  - 객체 : 보통은 클래스를 호출 할 때 [클래스 객체 = new 클래스()] 이렇게 쓰이지 않는가.
          이때 이 클래스를 지칭 할 수 있도록 해주는게 객체이다.
          
          ex) Animal cat = new Animal();
              Animal dog = new Animal();
              참고로 이렇게 동일한 클래스로 다양한 객체를 만들어내면 그 객체들은 서로서로가 다른 객체이다.

  - 인스턴스화 : 클래스를 객체화 시키는 걸 인스턴스화라고 생각해주면 된다. new 키워드와 생성자메소드를 사용하여 진행하게된다.
  - 객체변수 : 클래스 내부에 변수를 선언. 그러면 그 변수는 객체 변수가 된다.
              !!!!!!! 굉장히 중요한 점이 객체변수의 값은 독립적으로 유지된다 !!!!!!!!
  - 메서드 : 클래스 내에 구현된 함수라고 생각하면 된다.
  - this : 보기만 해도 덜덜덜 떨리는 메서드이다.
          간단히 말하면 객체를 지칭해주는 메서드이다.
          너무 막연한 설명인 것 같으니 예시를 들어주면 단박에 이해가 갈 수 있다.


class Animal {
    String name;

    public void setName(String name) {
        this.name = name;
    }
}

public class Sample {
    public static void main(String[] args) {
        Animal cat = new Animal();
        cat.setName("boby");  // 메서드 호출 -> cat으로 지칭되어진 Animal 클래스의 객체변수에 값을 저장
        Animal dog = new Animal();
        dog.setName("happy"); // 메서드 호출 -> dog로 지칭되어진 Animal 클래스의 객체변수에 값을 저장 

        System.out.println(cat.name);
        System.out.println(dog.name);
    }
}



이런 코드가 있을 때 main에서 객체.객체변수 형태로 메서드에 전달해주고 있다. cat.name
이 형태가 메서드에 당도했을 때 얘가 단순히 값이 아니라 객체.객체변수 이기 때문에 그 객체를 표현해 줄 필요가 있다.
그래서! Animal의 객체변수를 지칭하긴 하되, cat이라고 표현한 Animal의 객체변수 를 사용한다. 라는 말이 된다.
cat으로 지칭한 것과 dog로 지칭한 것과 다른 것이지 않겠는가. this는 이것을 미연에 방지하기 위해 사용되어지는 것이다.

결론지어 말하자면 생성자에 있는 this는 


3. 생각 해봐야 하는 부분...1

Car car3 = generateCar(car);

public static Car generateCar(Car car) {
		Car returnCar = new Car();
		return returnCar;
	}

이렇게 되어 있을 때 car3와 returnCar의 관계는 어떻게 되는 것일까?

일단 car3는 객체 생성이 되지 않았다.
returnCar는 객체가 생성되었다.

그래서 returnCar에 있는 것을 car3에 그냥 대입하는 느낌이다. 얕은 복사인 것이다.
단 returnCar는 generateCar에 있는 객체이기 때문에 초기화 된다.

4. 생성자

Car car = new Car();에서
Car()가 바로 기본생성자이다. 따로 정의하지 않아도 제공되는 생성자이다. (기본으로 제공되며 생략되어 있다.)
이게 아니면 매개변수가 있는 생성자를 만들어야 하는데 주의할 점이 이거 만들면 기본 생성자도 직접 하나 만들어야 한다!!!
리턴타입이 없으며 클래스 이름과 같은 이름으로 만들어준다.
그래서 매개변수가 있는 생성자를 만들 때는 기본 생성자를 먼저 만들어줘야 한다.

public 클래스명() {
	this.company = "현대" // 이러면 이 클래스를 사용하는 객체들은 현대차만 만들어준다.
    }

public 클래스명(매개변수) {
        //받아온 매개변수들을 통해 속성값의 초기화 가능
        //매개변수에 제한은 없다.
	this.company = 매개변수; // 이러면 입력하면 이걸로 바꿀 수 있게 함.
    }

--> 그래서 매개변수가 있는 생성자는 받아온 매개변수 값으로 클래스의 속성을 초기화 시켜주도록 하는 것이 일반적이다.
--> 매개변수 생성자에서 어떤 변수를 초기화하는 명확하게 하기 위해서 속성 변수명과 일치시키는 게 관례적이다.


이런 느낌.

4-1. 생성자는 (관례적으로) 속성과 기능 사이에 만들어 주도록 한다.
4-2. 그리고 언제나 클래스 명으로 정의를 해줘야 한다.




5. 그래서 오늘 배운 내용들의 커다란 골자는

[클래스]

	[객체변수]

	[생성자]

	[메소드]

이 순으로 클래스가 구성되어지게 된다(보통)

그리고 this메소드는 매개변수가 있을 때만 쓰는 걸루. 없을 땐 되도록이면 쓰지 말자. 헷갈린다.













